# -*- coding: utf-8 -*-
"""Agriculture Crop Predictions.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PlipXispyk5z24k6HkTXyUpRT94kU4Kv
"""

import numpy as np 
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from ipywidgets import interact
crop = pd.read_csv(r"C:\Users\Hp\Desktop\agri\Crop Recommendation.csv")
crop

print("shape of the dataset:",crop.shape)

crop.head()

#To check how many null values are there in given dataset we use isnull function 
crop.isnull().sum()

crop['label'].value_counts()

crop.describe()

@interact
def summary(crops = list(crop['label'].value_counts().index)):
    x = crop[crop['label']== crops]
    z = crop.drop(['label'],axis=1)
    y = []
    y.append(z)
    for i in z:
        print('Minimum', i, 'required', x[i].min())
        print('Average', i, 'required', x[i].mean())
        print('Maximum', i, 'required', x[i].max())
        print('--------------------------------------------------')

print('Summer Crops:', crop[(crop['temperature']>30) & (crop['humidity']>50)]['label'].unique())
print('Winter Crops:', crop[(crop['temperature']<20) & (crop['humidity']>30)]['label'].unique())
print('Rainy Crops:', crop[(crop['rainfall']>200) & (crop['humidity']>30)]['label'].unique())

plt.scatter(x = crop['ph'], y = crop['rainfall'], color = 'green')

plt.scatter(x = crop['ph'], y = crop['temperature'], color = 'green')

print("summer crops")
print (crop[(crop['temperature']>30) & (crop['humidity']>50)]['label'].unique())
print("----------")
print(crop[(crop['temperature']<20) & (crop['humidity']>30)]['label'].unique())
print("------------")
print(crop[(crop['rainfall']>200) & (crop['humidity']>30)]['label'].unique())
print("------------")

from sklearn.cluster import KMeans
x = crop.drop(['label'], axis = 1)
x = x.values
print(x.shape)

z = crop.drop(['label'],axis=1)
from sklearn.cluster import KMeans
plt.rcParams['figure.figsize'] = (10,4)
wcss = []
for i in range (1,11):
    km = KMeans(n_clusters =i, init= 'k-means++', max_iter=300, n_init=10, random_state=0)
    km.fit(z)
    wcss.append(km.inertia_)
    
#plot the results
plt.plot(range(1,11), wcss)
plt.title('Elbow Method', fontsize= 15)
plt.xlabel('No. of cluster')
plt.ylabel('wcss')
plt.show()

km = KMeans(n_clusters =4, init= 'k-means++', max_iter=300, n_init=10, random_state=0)
y_means= km.fit_predict(z)

a = crop['label']
y_means = pd.DataFrame(y_means)
w = pd.concat([y_means, a], axis=1)
w =w.rename(columns= {0:'cluster'})
for i in range(0,4): #for 4 clusters 0,1,2,3
    print('Crops is cluster', i, w[w['cluster']==i]['label'].unique())
    print('---------------------------------------------------------------------')

y = crop['label']
y.head()
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x,y, test_size=0.2, random_state=0)

from sklearn.metrics import accuracy_score,confusion_matrix
from sklearn.neighbors import KNeighborsClassifier
clf_knn = KNeighborsClassifier(n_neighbors=3)
clf_knn.fit(x_train,y_train)
y_pred1 = clf_knn.predict(x_test)
print("Accuracy Score of KNN:",accuracy_score(y_test,y_pred1))

from sklearn.svm import SVC
clf_svc = SVC()
clf_svc.fit(x_train,y_train)
y_pred2 = clf_svc.predict(x_test)
print("Accuracy Score of SVC:",accuracy_score(y_test,y_pred2))

from sklearn.tree import DecisionTreeClassifier
clf_dtc = DecisionTreeClassifier(criterion='entropy',random_state=7)
clf_dtc.fit(x_train,y_train)
y_pred3 = clf_dtc.predict(x_test)
print("Accuracy Score of decision tree:",accuracy_score(y_test,y_pred3))

from sklearn.ensemble import RandomForestClassifier
clf_rfc = RandomForestClassifier(random_state=1)
clf_rfc.fit(x_train, y_train)
y_pred4 = clf_rfc.predict(x_test)
print("Accuracy Score of Random Forest:",accuracy_score(y_test,y_pred4))

y_train_pred = clf_rfc.predict(x_train)
print("Accuracy Score of Random Forest:",accuracy_score(y_train,y_train_pred))

output = pd.DataFrame({'Real_class': y_test, 'Predicted_class': y_pred4})
output.head()

# input = np.array([[74,35,40,26.491096,80.158363,6.980401,242.864034]])
# clf_rfc.predict(input)

import streamlit as st
import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier

# Load the trained model
model = RandomForestClassifier(random_state=1)
model.fit(x, y)  # Assuming 'x' and 'y' are the training data

# Function to predict crop based on input valuespip
def predict_crop(input_data):
    prediction = model.predict(input_data)
    return prediction

# Streamlit app
def main():
    st.title("Crop Prediction")
    st.write("Enter the following parameters to predict the crop:")

    # Input fields
    nitrogen = st.number_input("Nitrogen (N)")
    phosphorous = st.number_input("Phosphorous (P)")
    potassium = st.number_input("Potassium (K)")
    temperature = st.number_input("Temperature")
    humidity = st.number_input("Humidity")
    ph = st.number_input("pH")
    rainfall = st.number_input("Rainfall")

    # Create a numpy array with the input values
    input_data = np.array([[nitrogen, phosphorous, potassium, temperature, humidity, ph, rainfall]])

    # Predict the crop
    if st.button("Predict"):
        prediction = predict_crop(input_data)
        st.success("Predicted Crop: {}".format(prediction))

if __name__ == "__main__":
    main()
